;;
;; Problem 2
;; 
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
;; By starting with 1 and 2, the first 10 terms will be:
;;
;;  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; By considering the terms in the Fibonacci sequence whose values do not exceed four million,
;; find the sum of the even-valued terms.
;;

;; 
;; Define a fast fibonacci procedure:
;;
(defn square [n] (* n n))

(defn fib-iter [a b p q count]
  (cond (= count 0) b
  	(even? count) (fib-iter a 
	       	      		b
				(+ (square p) (square q))
				(+ (* 2 p q) (square q))
				(/ count 2))
	:else (fib-iter (+ (* b q) (* a q) (* a p))
	      		(+ (* b p) (* a q))
			p  
			q
			(- count 1))))

(defn fib [n]
  (fib-iter 1 0 0 1 n))

;;
;; Now define an infinite (lazy) sequence from which we can cull elements:
;;
(def nums (iterate inc 1))

;;
;; Calculate the sum we are looking for:
;;
(reduce + (filter even? (map fib (take 33 nums))))
;; ==> 4,613,732